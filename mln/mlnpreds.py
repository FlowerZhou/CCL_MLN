"""
Predicate
"""

from dnutils import logs

from mln.mrfvars import BinaryVariable, FuzzyVariable, SoftMutexVariable, \
    MutexVariable

logger = logs.getlogger(__name__)


class Predicate(object):
    """
    Represents a logical predicate and its properties.

    :param pred_name:    the name of the predicate.
    :param arg_doms:     the list of domains of the predicate's arguments.
    """

    def __init__(self, name, arg_doms):
        self.arg_doms = arg_doms
        self.name = name
        self.num_args = len(arg_doms)

    def var_name(self, ground_atom):
        """
        Takes an instance of a ground atom and generates the name
        of the corresponding variable.
        """
        return str(ground_atom)

    def to_variable(self, mrf, ground_atom):
        """
        Creates a new instance of an atomic ground block instance
        depending on the type of the predicate
        """
        return BinaryVariable(mrf, name=self.var_name(ground_atom), predicate=self)

    def ground_atoms(self, mln, domains):
        """
        Iterates over all ground atoms that can be generated by this predicate
        given the domains and the MLN.

        :param domains:    dict mapping the domain names to their values.
        """
        for ground_atom in self._ground_atoms(mln, domains, [], self.arg_doms):
            yield ground_atom

    def _ground_atoms(self, mln, domains, values, arg_doms):
        # if there are no more parameters to ground, we're done
        # and we cann add the ground atom to the MRF
        if not arg_doms:
            yield mln.logic.ground_atom(self.name, values, mln)
            return
        # create ground atoms for each way of grounding the first of the
        # remaining variables whose domains are given in domNames
        dom = domains.get(arg_doms[0])
        if dom is None or len(dom) == 0:
            logger.info("Ground Atoms for predicate %s could not be generated, since the domain '%s' is empty" % (
                str(self), arg_doms[0]))
            return
        for value in dom:
            for ground_atom in self._ground_atoms(mln, domains, values + [value], arg_doms[1:]):
                yield ground_atom

    def __eq__(self, other):
        return type(other) == type(self) and other.name == self.name and other.arg_doms == self.arg_doms

    def __ne__(self, other):
        return not self == other

    def __str__(self):
        return '%s(%s)' % (self.name, self.arg_str())

    def __repr__(self):
        return '<Predicate: %s>' % str(self)

    def arg_str(self):
        return ','.join(map(str, self.arg_doms))


class FuzzyPredicate(Predicate):
    """
    Represents a predicate whose atom can take fuzzy degrees of truth in [0,1].
    """

    def __init__(self, name, arg_doms):
        Predicate.__init__(self, name, arg_doms)

    def __repr__(self):
        return '<FuzzyPredicate: %s>' % str(self)

    def to_variable(self, mrf, ground_atom):
        return FuzzyVariable(mrf, name=self.var_name(ground_atom), predicate=self)


class FunctionalPredicate(Predicate):
    """
    Represents a predicate declaration for a functional constraint.
    :param mutex:    (int) the index of the mutex argument

    """

    def __init__(self, name, argdoms, mutex):
        Predicate.__init__(self, name, argdoms)
        self.mutex = mutex

    def var_name(self, ground_atom):
        nonfuncargs = [p if i != self.mutex else '_' for i, p in enumerate(ground_atom.args)]
        return '%s(%s)' % (ground_atom.predname, ','.join(nonfuncargs))

    def to_variable(self, mrf, name):
        return MutexVariable(mrf, name, self)

    def __eq__(self, other):
        return Predicate.__eq__(self, other) and self.mutex == other.mutex

    def __str__(self):
        return '%s(%s)' % (self.name, self.arg_str())

    def __repr__(self):
        return '<FunctionalPredicate: %s>' % str(self)

    def arg_str(self):
        return ','.join([arg if i != self.mutex else '%s!' % arg for i, arg in enumerate(self.arg_doms)])


class SoftFunctionalPredicate(FunctionalPredicate):
    """
    Represents a predicate declaration for soft function constraint.
    """

    def to_variable(self, mrf, name):
        return SoftMutexVariable(mrf, name, self)

    def __str__(self):
        return '%s(%s)' % (self.name, self.arg_str())

    def arg_str(self):
        return ','.join([arg if i != self.mutex else '%s?' % arg for i, arg in enumerate(self.arg_doms)])

    def __repr__(self):
        return '<SoftFunctionalPredicate: %s>' % str(self)
